{"version":3,"file":"main.ce7a2acd0d28749a696e.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AADA;AAFA;AAUA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AAEA;;AAAA;AAAA;AAAA;AAAA;;AAUA;AAEA;;;;;;;;;;;;;;;;ACdA;AACA;AAQA;AACA;AAAA;AAAA;;AAEA;AACA;AAEA;AACA;AACA;;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;;AAEA;;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAIA;;AAVA;AAYA","sources":["webpack://frontend-react-deep-cource/./config/storybook/preview.js","webpack://frontend-react-deep-cource/./src/app/providers/ThemeProvider/index.ts","webpack://frontend-react-deep-cource/./src/app/providers/ThemeProvider/lib/ThemeContext.ts","webpack://frontend-react-deep-cource/./src/app/providers/ThemeProvider/lib/useTheme.ts","webpack://frontend-react-deep-cource/./src/app/providers/ThemeProvider/ui/ThemeProvider.tsx"],"sourcesContent":["import { addDecorator } from \"@storybook/react\";\nimport { StyleDecorator } from \"../../src/shared/config/storybook/StyleDecorator/StyleDecorator\";\nimport { ThemeDecorator } from \"../../src/shared/config/storybook/ThemeDecorator/ThemeDecorator\";\nimport { Theme } from \"../../src/app/providers/ThemeProvider\";\n\nexport const parameters = {\n\tactions: { argTypesRegex: \"^on[A-Z].*\" },\n\tcontrols: {\n\t\tmatchers: {\n\t\t\tcolor: /(background|color)$/i,\n\t\t\tdate: /Date$/,\n\t\t},\n\t},\n};\n\naddDecorator(StyleDecorator);\naddDecorator(ThemeDecorator(Theme.DARK));\n","import { Theme } from \"./lib/ThemeContext\";\nimport { useTheme } from \"./lib/useTheme\";\nimport ThemeProvider from \"./ui/ThemeProvider\";\n\nexport { ThemeProvider, useTheme, Theme };\n","import { createContext } from \"react\";\n\nexport enum Theme {\n    LIGHT = \"light\",\n    DARK = \"dark\"\n}\n\nexport interface ThemeContextProps  {\n    theme?: Theme,\n    setTheme?: (theme: Theme) => void\n}\n\nexport const ThemeContext = createContext<ThemeContextProps>({});\n\nexport const LOCAL_STORAGE_THEME_KEY = \"theme\";\n","import { useContext } from \"react\";\nimport { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from \"./ThemeContext\";\n\n\ninterface UseThemeResult {\n    toggleTheme?:() => void,\n    theme: Theme\n}\n\nexport function useTheme(): UseThemeResult{\n\tconst { theme, setTheme } = useContext(ThemeContext);\n\n\tconst toggleTheme = () => {\n\t\tconst newTheme = theme === Theme.DARK ? Theme.LIGHT : Theme.DARK;\n\n\t\tsetTheme(newTheme);\n\t\tlocalStorage.setItem(LOCAL_STORAGE_THEME_KEY, newTheme);\n\t};\n\n\treturn { theme, toggleTheme };\n}\n","import React, { FC, useMemo, useState } from \"react\";\nimport { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from \"../lib/ThemeContext\";\n\nconst defaultTheme = localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme || Theme.LIGHT;\n\nconst ThemeProvider:FC = ({ children }) => {\n\tconst [theme, setTheme] = useState<Theme>(defaultTheme);\n\n\tconst defaultProps = useMemo(() => ({ theme, setTheme }), [theme]);\n\n\treturn (\n\t\t<ThemeContext.Provider value={defaultProps}>\n\t\t\t{children}\n\t\t</ThemeContext.Provider>\n\t);\n};\n\nexport default ThemeProvider;\n"],"names":[],"sourceRoot":""}