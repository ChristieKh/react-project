const React = require('react');

const importJsx = require('import-jsx');

const {
  EVENT_CHANGE,
  EVENT_END
} = require('../../task-runner');

const TaskList = importJsx('./TaskList');

const throttle = (fn, threshold = 16) => {
  let throttled = false;
  let lastCalledArguments = null;

  const executeAfterThreshold = () => setTimeout(() => {
    if (lastCalledArguments) {
      fn(...lastCalledArguments);
      lastCalledArguments = null;
      executeAfterThreshold();
    } else {
      throttled = false;
    }
  }, threshold);

  return (...args) => {
    if (throttled) {
      lastCalledArguments = args;
    } else {
      throttled = true;
      executeAfterThreshold();
      fn(...args);
    }
  };
};

class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      tasks: this.props.taskRunner.getState()
    };
    this.ended = false;

    const updateTasks = () => {
      if (!this.ended) {
        const tasks = this.props.taskRunner.getState();
        this.setState({
          tasks
        });
      }
    };

    this.handleEnd = () => {
      updateTasks();
      this.ended = true;
    };

    this.handleChange = throttle(updateTasks, 200);
  }

  componentDidMount() {
    this.props.taskRunner.on(EVENT_END, this.handleEnd);
    this.props.taskRunner.on(EVENT_CHANGE, this.handleChange);
  }

  componentWillUnmount() {
    this.ended = true;
    this.props.taskRunner.removeListener(EVENT_END, this.handleEnd);
    this.props.taskRunner.removeListener(EVENT_CHANGE, this.handleChange);
  }

  render() {
    return /*#__PURE__*/React.createElement(TaskList, {
      tasks: this.state.tasks
    });
  }

}

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJpbXBvcnRKc3giLCJFVkVOVF9DSEFOR0UiLCJFVkVOVF9FTkQiLCJUYXNrTGlzdCIsInRocm90dGxlIiwiZm4iLCJ0aHJlc2hvbGQiLCJ0aHJvdHRsZWQiLCJsYXN0Q2FsbGVkQXJndW1lbnRzIiwiZXhlY3V0ZUFmdGVyVGhyZXNob2xkIiwic2V0VGltZW91dCIsImFyZ3MiLCJBcHAiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJ0YXNrcyIsInRhc2tSdW5uZXIiLCJnZXRTdGF0ZSIsImVuZGVkIiwidXBkYXRlVGFza3MiLCJzZXRTdGF0ZSIsImhhbmRsZUVuZCIsImhhbmRsZUNoYW5nZSIsImNvbXBvbmVudERpZE1vdW50Iiwib24iLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUxpc3RlbmVyIiwicmVuZGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkFwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBpbXBvcnRKc3ggPSByZXF1aXJlKCdpbXBvcnQtanN4Jyk7XG5jb25zdCB7IEVWRU5UX0NIQU5HRSwgRVZFTlRfRU5EIH0gPSByZXF1aXJlKCcuLi8uLi90YXNrLXJ1bm5lcicpO1xuXG5jb25zdCBUYXNrTGlzdCA9IGltcG9ydEpzeCgnLi9UYXNrTGlzdCcpO1xuXG5jb25zdCB0aHJvdHRsZSA9IChmbiwgdGhyZXNob2xkID0gMTYpID0+IHtcbiAgbGV0IHRocm90dGxlZCA9IGZhbHNlO1xuICBsZXQgbGFzdENhbGxlZEFyZ3VtZW50cyA9IG51bGw7XG5cbiAgY29uc3QgZXhlY3V0ZUFmdGVyVGhyZXNob2xkID0gKCkgPT5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChsYXN0Q2FsbGVkQXJndW1lbnRzKSB7XG4gICAgICAgIGZuKC4uLmxhc3RDYWxsZWRBcmd1bWVudHMpO1xuICAgICAgICBsYXN0Q2FsbGVkQXJndW1lbnRzID0gbnVsbDtcbiAgICAgICAgZXhlY3V0ZUFmdGVyVGhyZXNob2xkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdHRsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LCB0aHJlc2hvbGQpO1xuXG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGlmICh0aHJvdHRsZWQpIHtcbiAgICAgIGxhc3RDYWxsZWRBcmd1bWVudHMgPSBhcmdzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdHRsZWQgPSB0cnVlO1xuICAgICAgZXhlY3V0ZUFmdGVyVGhyZXNob2xkKCk7XG4gICAgICBmbiguLi5hcmdzKTtcbiAgICB9XG4gIH07XG59O1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB0YXNrczogdGhpcy5wcm9wcy50YXNrUnVubmVyLmdldFN0YXRlKCksXG4gICAgfTtcblxuICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHVwZGF0ZVRhc2tzID0gKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmVuZGVkKSB7XG4gICAgICAgIGNvbnN0IHRhc2tzID0gdGhpcy5wcm9wcy50YXNrUnVubmVyLmdldFN0YXRlKCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0YXNrcyB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVFbmQgPSAoKSA9PiB7XG4gICAgICB1cGRhdGVUYXNrcygpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRocm90dGxlKHVwZGF0ZVRhc2tzLCAyMDApO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy50YXNrUnVubmVyLm9uKEVWRU5UX0VORCwgdGhpcy5oYW5kbGVFbmQpO1xuICAgIHRoaXMucHJvcHMudGFza1J1bm5lci5vbihFVkVOVF9DSEFOR0UsIHRoaXMuaGFuZGxlQ2hhbmdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgIHRoaXMucHJvcHMudGFza1J1bm5lci5yZW1vdmVMaXN0ZW5lcihFVkVOVF9FTkQsIHRoaXMuaGFuZGxlRW5kKTtcbiAgICB0aGlzLnByb3BzLnRhc2tSdW5uZXIucmVtb3ZlTGlzdGVuZXIoRVZFTlRfQ0hBTkdFLCB0aGlzLmhhbmRsZUNoYW5nZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxUYXNrTGlzdCB0YXNrcz17dGhpcy5zdGF0ZS50YXNrc30gLz47XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxNQUFNO0VBQUVFLFlBQUY7RUFBZ0JDO0FBQWhCLElBQThCSCxPQUFPLENBQUMsbUJBQUQsQ0FBM0M7O0FBRUEsTUFBTUksUUFBUSxHQUFHSCxTQUFTLENBQUMsWUFBRCxDQUExQjs7QUFFQSxNQUFNSSxRQUFRLEdBQUcsQ0FBQ0MsRUFBRCxFQUFLQyxTQUFTLEdBQUcsRUFBakIsS0FBd0I7RUFDdkMsSUFBSUMsU0FBUyxHQUFHLEtBQWhCO0VBQ0EsSUFBSUMsbUJBQW1CLEdBQUcsSUFBMUI7O0VBRUEsTUFBTUMscUJBQXFCLEdBQUcsTUFDNUJDLFVBQVUsQ0FBQyxNQUFNO0lBQ2YsSUFBSUYsbUJBQUosRUFBeUI7TUFDdkJILEVBQUUsQ0FBQyxHQUFHRyxtQkFBSixDQUFGO01BQ0FBLG1CQUFtQixHQUFHLElBQXRCO01BQ0FDLHFCQUFxQjtJQUN0QixDQUpELE1BSU87TUFDTEYsU0FBUyxHQUFHLEtBQVo7SUFDRDtFQUNGLENBUlMsRUFRUEQsU0FSTyxDQURaOztFQVdBLE9BQU8sQ0FBQyxHQUFHSyxJQUFKLEtBQWE7SUFDbEIsSUFBSUosU0FBSixFQUFlO01BQ2JDLG1CQUFtQixHQUFHRyxJQUF0QjtJQUNELENBRkQsTUFFTztNQUNMSixTQUFTLEdBQUcsSUFBWjtNQUNBRSxxQkFBcUI7TUFDckJKLEVBQUUsQ0FBQyxHQUFHTSxJQUFKLENBQUY7SUFDRDtFQUNGLENBUkQ7QUFTRCxDQXhCRDs7QUEwQkEsTUFBTUMsR0FBTixTQUFrQmQsS0FBSyxDQUFDZSxTQUF4QixDQUFrQztFQUNoQ0MsV0FBVyxDQUFDQyxLQUFELEVBQVE7SUFDakIsTUFBTUEsS0FBTjtJQUVBLEtBQUtDLEtBQUwsR0FBYTtNQUNYQyxLQUFLLEVBQUUsS0FBS0YsS0FBTCxDQUFXRyxVQUFYLENBQXNCQyxRQUF0QjtJQURJLENBQWI7SUFJQSxLQUFLQyxLQUFMLEdBQWEsS0FBYjs7SUFFQSxNQUFNQyxXQUFXLEdBQUcsTUFBTTtNQUN4QixJQUFJLENBQUMsS0FBS0QsS0FBVixFQUFpQjtRQUNmLE1BQU1ILEtBQUssR0FBRyxLQUFLRixLQUFMLENBQVdHLFVBQVgsQ0FBc0JDLFFBQXRCLEVBQWQ7UUFDQSxLQUFLRyxRQUFMLENBQWM7VUFBRUw7UUFBRixDQUFkO01BQ0Q7SUFDRixDQUxEOztJQU9BLEtBQUtNLFNBQUwsR0FBaUIsTUFBTTtNQUNyQkYsV0FBVztNQUNYLEtBQUtELEtBQUwsR0FBYSxJQUFiO0lBQ0QsQ0FIRDs7SUFJQSxLQUFLSSxZQUFMLEdBQW9CcEIsUUFBUSxDQUFDaUIsV0FBRCxFQUFjLEdBQWQsQ0FBNUI7RUFDRDs7RUFFREksaUJBQWlCLEdBQUc7SUFDbEIsS0FBS1YsS0FBTCxDQUFXRyxVQUFYLENBQXNCUSxFQUF0QixDQUF5QnhCLFNBQXpCLEVBQW9DLEtBQUtxQixTQUF6QztJQUNBLEtBQUtSLEtBQUwsQ0FBV0csVUFBWCxDQUFzQlEsRUFBdEIsQ0FBeUJ6QixZQUF6QixFQUF1QyxLQUFLdUIsWUFBNUM7RUFDRDs7RUFFREcsb0JBQW9CLEdBQUc7SUFDckIsS0FBS1AsS0FBTCxHQUFhLElBQWI7SUFDQSxLQUFLTCxLQUFMLENBQVdHLFVBQVgsQ0FBc0JVLGNBQXRCLENBQXFDMUIsU0FBckMsRUFBZ0QsS0FBS3FCLFNBQXJEO0lBQ0EsS0FBS1IsS0FBTCxDQUFXRyxVQUFYLENBQXNCVSxjQUF0QixDQUFxQzNCLFlBQXJDLEVBQW1ELEtBQUt1QixZQUF4RDtFQUNEOztFQUVESyxNQUFNLEdBQUc7SUFDUCxvQkFBTyxvQkFBQyxRQUFEO01BQVUsS0FBSyxFQUFFLEtBQUtiLEtBQUwsQ0FBV0M7SUFBNUIsRUFBUDtFQUNEOztBQXJDK0I7O0FBd0NsQ2EsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkIsR0FBakIifQ==